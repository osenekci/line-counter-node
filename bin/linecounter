#!/usr/bin/env node
/**
 * * * * * * * * * * * * * * * * * * * *
 *             Line Counter            *
 * * * * * * * * * * * * * * * * * * * *
 *                                     *
 * Author  : Özgür Senekci             *
 *                                     *
 * Skype   :  socialinf                *
 *                                     *
 * License : The MIT License (MIT)     *
 *                                     *
 * * * * * * * * * * * * * * * * * * * *
 */

const homedir = require("homedir");
const path = require("path");
const fs = require("fs");
const colors = require("colors");

var Commands = {
    global: {
        version: {
            name: "version",
            alias: "v",
            description: "Shows current version of linecounter",
            usage: undefined
        },
        help: {
            name: "help",
            alias: "h",
            description: "Shows available commands with descriptions",
            usage: undefined
        }
    },
    methods: {
        count: {
            name: "count",
            description: "Scans given directory recursively and returns lines of founded files",
            options: {
                path: {
                    name: "path",
                    alias: "p",
                    description: "The directory path which will be scanned. If not specified, target directory will be current directory",
                    usage: "-p \"/var/www/html\" or --path=\"/var/www/html/\""
                },
                extensions: {
                    name: "extensions",
                    alias: "e",
                    description: "Comma separated extension list. Only the files with given extensions will be counted",
                    usage: "-e \"php, js, java\" or --extensions=\"php, js, java\""
                },
                except: {
                    name: "except",
                    alias: "i",
                    description: "Comma separated extension list which will be ignored",
                    usage: "-i \"php, js, java\" or --except=\"php, js, java\""
                },
                rules: {
                    name: "rules",
                    alias: "r",
                    description: "Additional rules. See readme for rule list",
                    usage: "-r \"ignoreHidden\" or --rules=\"ignoreHidden|ignoreDirs(node_modules,vendor)\""
                },
                save: {
                    name: "save",
                    alias: "s",
                    description: "Saves all options except path. Configuration file path $HOME/.linecounter.json",
                    usage: "-s confName or --save=confName"
                },
                config: {
                    name: "config",
                    alias: "c",
                    description: "Uses a saved configuration. All options except path will be used from given configuration",
                    usage: "-c confName or --config=confName"
                },
                verbose: {
                    name: "verbose",
                    alias: "v",
                    description: "Shows accepted, ignored files and directories",
                    usage: undefined
                }
            }
        },
        config: {
            name: "config",
            description: "Lists, shows and removes available configurations",
            options: {
                list: {
                    name: "list",
                    alias: "l",
                    description: "Displays all saved configurations",
                    usage: "-l or --list"
                },
                show: {
                    name: "show",
                    alias: "s",
                    description: "Shows a saved configuration's details",
                    usage: "-s confName or --show=confName"
                },
                remove: {
                    name: "remove",
                    alias: "r",
                    description: "Removes a saved configuration",
                    usage: "-r confName or --remove=confName"
                },
                destroy: {
                    name: "destroy",
                    alias: "d",
                    description: "Removes all configurations by removing configuration file",
                    usage: "-d or --destroy"
                }
            }
        }
    }
};

function Cli(args){
    var commands = [];
    var globalOptions = [];

    this.addCommand = function(name, callback){
        commands.push({
            name: name,
            callback: callback
        });
    };

    this.addGlobalOption = function(option, callback){
        globalOptions.push({
            option: option,
            callback: callback
        });
    };

    this.execute = function(){
        if( args.length > 0 ){
            var isGlobal = false, i;
            // Decide if its a global option
            var first = args[0];
            for( i = 0; i < globalOptions.length; i++ ){
                if( ("--" + globalOptions[i].option.name) === first || ("-" + globalOptions[i].option.alias) === first ){
                    globalOptions[i].callback();
                    isGlobal = true;
                    return;
                }
            }
            if( !isGlobal ){
                for( i = 0; i < commands.length; i++ ){
                    if( commands[i].name === first ){
                        args.splice(0, 1); // remove method name from args
                        try{
                            commands[i].callback(parseArguments());
                        }
                        catch(e){
                            console.log(colors.red(e.message));
                        }
                        return;
                    }
                }
            }
            console.log(colors.red("Method does not exists. USe --help to see available methods."));
        }
        else{
            for( var j = 0; j < globalOptions.length; j++ ){
                if( globalOptions[j].option.name === "help" ){
                    globalOptions[j].callback();
                    break;
                }
            }
        }
    };

    function parseArguments(){
        var mapping = {};
        mapping.length = 0;
        for( var i = 0; i < args.length; i++ ){
            if( args[i].indexOf("--") === 0 || args[i].indexOf("-") === 0 ){
                var argName = args[i].replace(/-+/, "").trim();
                if( argName === "" ){
                    throw new Error("Invalid argument");
                }
                if( typeof mapping[argName] !== 'undefined' ){
                    throw new Error("Duplicate option is not allowed");
                }
                else{
                    if( args[i].indexOf("--") === 0 ){
                        var parts = argName.split("=");
                        if( parts.length !== 2 ){
                            argName = parts[0];
                            mapping[argName] = true;
                        }
                        else{
                            argName = parts[0];
                            mapping[argName] = parts[1];
                        }
                    }
                    else{
                        if( (i + 1) < args.length && args[i + 1].indexOf("-") === -1 ){
                            mapping[argName] = args[++i];
                        }
                        else{
                            mapping[argName] = true;
                        }
                    }
                    mapping.length++;
                }
            }
            else{
                throw new Error("Invalid arguments");
            }
        }
        return mapping;
    }

    // remove executed file path and interpreter path
    args.splice(0, 2);
}

function version(){
    console.log(getVersion());
}

function help(){
    var globals = Commands.global;
    var commands = Commands.methods;
    var space = " ";
    drawInfo();
    console.log(colors.yellow("Options"));
    var cmd, i;
    for( i in globals ){
        if( globals.hasOwnProperty(i) ){
            cmd = getOptionName(globals[i]);
            console.log(' ', colors.cyan(cmd), space.repeat(19 - cmd.length), globals[i].description);
            if( typeof globals[i].usage !== 'undefined' ){
                console.log(space.repeat(24), "Usage: " + globals[i].usage);
            }
        }
    }

    console.log("");

    console.log(colors.yellow("Methods"));
    var counter = 1;
    for( i in commands ){
        if( commands.hasOwnProperty(i) ){
            console.log(' ' + colors.underline(counter + ') ' + commands[i].name), space.repeat(20 - commands[i].name.length));
            var opts = commands[i].options;
            for( var j in opts ){
                if( opts.hasOwnProperty(j) ){
                    cmd = getOptionName(opts[j]);
                    console.log('   ', colors.cyan(cmd), space.repeat(19 - cmd.length), opts[j].description);
                    if( typeof opts[j].usage !== 'undefined' ){
                        console.log(space.repeat(24), "Usage: " + opts[j].usage);
                    }
                }
            }
            console.log("");
            counter++;
        }
    }

    function drawInfo(){
        var name = '    ___                        ______\n' +
            '   /  /    __ _____   ___     /  ___/____   __   __ _____   __    ___   ____\n' +
            '  /  /    / // __  \\ / _ \\   /  /   / _  \\ / /  / // __  \\ / /__ / _ \\ / __/\n' +
            ' /  /___ / // /  / //  __/  /  /___/ /_/ // /__/ // /  / //  __//  __// /\n' +
            ' \\_____//_//_/  /_/ \\___/   \\_____/\\____/ \\_____//_/  /_/ \\___/ \\___//_/\n';
        console.log(name);
        var versionInfo = colors.cyan("Line Counter") + " version " + colors.yellow(getVersion());
        var nudeVersionInfo = "Line Counter version " + getVersion();
        var splitName = name.split("\n");
        var createdBy = "Created By Özgür Senekci";
        var lastLineLength = splitName[splitName.length - 2].length;
        var space = " ";
        console.log(versionInfo + space.repeat(lastLineLength - nudeVersionInfo.length - createdBy.length) + createdBy);
        console.log("");
    }

    function getOptionName(option){
        var name = "--" + option.name;
        if( option.alias !== null ){
            name = "-" + option.alias + ", " + name;
        }
        return name;
    }
}

function count(args){
    const LineCounter = require("../index").LineCounter;
    const ExtensionsFactory = require("../index").ExtensionsFactory;
    const Rules = require("../index").Rules;
    const Events = require("../index").Events;

    var path = args.path || args.p || "./";
    var config = args.config || args.c || undefined;
    var save = args.save || args.s || undefined;
    var extensions, except, rules, verbose, confFile, content;

    try{
        if( typeof config !== 'undefined' ){
            confFile = getConfFile();
            if( fs.existsSync(confFile) ){
                content = JSON.parse(fs.readFileSync(confFile));
                if( typeof content[config] === "undefined" ){
                    console.log(colors.red("Invalid configuration"));
                    return;
                }
                else{
                    var conf = content[config];
                    extensions = conf.extensions;
                    except = conf.except;
                    rules = conf.rules;
                    verbose = conf.verbose;
                }
                if( verbose === true ){
                    console.log(colors.yellow("Configuration:"));
                    console.log("", JSON.stringify(content[config]));
                    console.log("");
                }
            }
            else{
                console.log(colors.red("Invalid configuration"));
                return;
            }
        }
        else{
            extensions = args.extensions || args.e || undefined;
            except = args.except || args.i || undefined;
            rules = args.rules || args.r || undefined;
            verbose = args.verbose || args.v || undefined;

            // Save config if save is enabled
            if( typeof save !== 'undefined' ){
                confFile = getConfFile();
                if( fs.existsSync(confFile) ){
                    content = JSON.parse(fs.readFileSync(confFile));
                }
                else{
                    content = {};
                }
                content[save] = {
                    extensions: extensions,
                    except: except,
                    rules: rules,
                    verbose: verbose
                };
                fs.writeFileSync(confFile, JSON.stringify(content));
            }
        }
    }
    catch(e){
        console.log(colors.red("Configuration file could not be processed. This could be a permission issue"));
        return;
    }

    var lc = new LineCounter();
    lc.setPath(path);
    if( typeof extensions !== 'undefined' ){
        lc.setExtensions(ExtensionsFactory.from(extensions));
    }
    else if( typeof except !== 'undefined' ){
        lc.setExtensions(ExtensionsFactory.except(except));
    }
    if( typeof rules !== 'undefined' ){
        var rulesArray = rules.split('|');
        rulesArray.forEach(function(rule){
            if( rule.length === 0 ){
                return;
            }
            if( rule.indexOf("(") > 0 ){
                var ruleTokens = rule.replace("(", "+").replace(")", "").split("+"); // ignoreDir(test) -> ignoreDir+test
                rule = ruleTokens[0];
                var ruleArgs = ruleTokens[1].split(",");
                if( typeof Rules[rule] !== 'undefined' ){
                    ruleArgs.unshift(Rules[rule]); // Add rule to the beginning of the array
                    lc.addRule.apply(lc, ruleArgs);
                }
                else{
                    console.log(colors.red("Rule not found: " + rule));
                }
            }
            else{
                if( typeof Rules[rule] !== 'undefined' ){
                    lc.addRule(Rules[rule]);
                }
                else{
                    console.log(colors.red("Rule not found: " + rule));
                }
            }
        });
    }
    try{
        if( typeof verbose !== 'undefined' ){
            console.log(colors.yellow("Scan results:"));
            lc.on(Events.FILE_ACCEPTED, function(fileName){
                logFile(fileName, true);
            });
            lc.on(Events.FILE_IGNORED, function(fileName){
                logFile(fileName, false);
            });
            lc.on(Events.DIR_IGNORED, function(fileName){
                logFile(fileName, false);
            });
        }
        lc.on(Events.ERROR, function(e){
            console.log(colors.red(" [ERROR]"), "  ", e);
        });
        lc.getLines(function(result){
            if( typeof verbose !== 'undefined' ){
                console.log("");
            }
            console.log("Total files: " + result.files);
            console.log("Total lines: " + result.lines);
        });
    }
    catch(e){
        console.log(colors.red(" [ERROR]"), "  ", e.message);
    }

    function logFile(file, accepted){
        if( accepted ){
            console.log(colors.green(" [ACCEPT]"), " ", file);
        }
        else{
            console.log(colors.gray(" [IGNORE]"), " ", file);
        }
    }
}


function config(args){
    var confFile = getConfFile(), content, exist = false;
    if( fs.existsSync(confFile) ){
        content = JSON.parse(fs.readFileSync(confFile));
        exist = true;
    }
    if( args.length === 0 ){
        listConfigurations();
    }
    else{
        var list = args.list || args.l || undefined;
        var show = args.show || args.s || undefined;
        var remove = args.remove || args.r || undefined;
        var destroy = args.destroy || args.d || undefined;
        if( typeof list !== 'undefined' && list === true ){
            listConfigurations();
        }
        else if( typeof show !== 'undefined' ){
            if( exist ){
                if( typeof content[show] !== 'undefined' ){
                    console.log(colors.yellow("Configuration", colors.cyan("'" + show + "'") + colors.yellow(":")));
                    console.log("  -", JSON.stringify(content[show]));
                }
                else{
                    console.log(colors.red("Configuration does not exist"));
                }
            }
            else{
                console.log(colors.red("Configuration does not exist"));
            }
        }
        else if( typeof remove !== 'undefined' ){
            if( exist ){
                if( typeof content[remove] !== 'undefined' ){
                    delete content[remove];
                    fs.writeFileSync(confFile, JSON.stringify(content));
                    console.log(colors.yellow("Configuration removed", colors.cyan("'" + remove + "'")));
                }
                else{
                    console.log(colors.red("Configuration does not exist"));
                }
            }
            else{
                console.log(colors.red("Configuration does not exist"));
            }
        }
        else if( typeof destroy !== 'undefined' ){
            if( exist ){
                fs.unlinkSync(confFile);
                console.log(colors.yellow("Configurations are removed"));
            }
        }
        else{
            console.log(colors.red("Invalid options"));
        }
    }

    function listConfigurations(){
        if( exist ){
            console.log(colors.yellow("List of available configurations:"));
            for( var i in content ){
                if( content.hasOwnProperty(i) ){
                    console.log('  -', colors.cyan(i));
                }
            }
        }
        else{
            console.log(colors.yellow("No configurations found"));
        }
    }
}


function getVersion(){
    return "v" + require("../package.json").version;
}

function getConfFile(){
    return path.join(homedir(), ".linecounter.json");
}


var cli = new Cli(process.argv);
cli.addGlobalOption(Commands.global.version, version);
cli.addGlobalOption(Commands.global.help, help);
cli.addCommand("count", count);
cli.addCommand("config", config);

cli.execute();

