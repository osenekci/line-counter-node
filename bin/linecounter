#!/usr/bin/env node
/**
 * * * * * * * * * * * * * * * * * * * *
 *             Line Counter            *
 * * * * * * * * * * * * * * * * * * * *
 *                                     *
 * Author  : Özgür Senekci             *
 *                                     *
 * Skype   :  socialinf                *
 *                                     *
 * License : The MIT License (MIT)     *
 *                                     *
 * * * * * * * * * * * * * * * * * * * *
 */

const colors = require("colors");

var args = {};

process.argv.forEach(function(val){
    if( val.indexOf("--") === 0 ){
        var tokens = val.replace("--", "").split("=");
        args[tokens[0]] = tokens.length === 1 ? true : tokens[1];
    }
});

if( typeof args.version !== 'undefined' ){
    var packageJson = require("../package.json");
    console.log("v" + packageJson.version);
}
else if( typeof args.help !== 'undefined' ){
    var options = [
        {
            cmd: "--version",
            desc: "Shows current version of linecounter"
        },
        {
            cmd: "--help",
            desc: "Shows available commands with descriptions"
        },
        {
            cmd: "--verbose",
            desc: "Shows accepted, ignored files and directories"
        },
        {
            cmd: "--path",
            desc: "The directory path which will be used as starting point. If path is not specified then target directory will be current directory",
            ex: "--path=\"/var/www/html/\""
        },
        {
            cmd: "--extensions",
            desc: "Comma separated extension list. Only the files with given extensions will be counted",
            ex: "--extensions=\"php, js, java\""
        },
        {
            cmd: "--except",
            desc: "Comma separated extension list which will be ignored",
            ex: "--except=\"php, js, java\""
        },
        {
            cmd: "--rules",
            desc: "Additional rules. See readme for rule list",
            ex: "--rules=\"ignoreHidden|ignoreDirs(node_modules,vendor)\""
        }
    ];
    var space = " ";
    console.log(colors.yellow("Options"));
    for( var j = 0; j < options.length; j++ ){
        console.log('   ', colors.cyan(options[j].cmd), space.repeat(12 - options[j].cmd.length), options[j].desc);
        if( typeof options[j].ex !== 'undefined' ){
            console.log(space.repeat(16), "Usage: " + options[j].ex);
        }
        console.log("");
    }
}
else{
    if( typeof args.path === 'undefined' ){
        args.path = "./";
    }

    const LineCounter = require("../index").LineCounter;
    const ExtensionsFactory = require("../index").ExtensionsFactory;
    const Rules = require("../index").Rules;
    const Events = require("../index").Events;

    var lc = new LineCounter();
    lc.setPath(args.path);
    if( typeof args.extensions !== 'undefined' ){
        lc.setExtensions(ExtensionsFactory.from(args.extensions));
    }
    else if( typeof args.except !== 'undefined' ){
        lc.setExtensions(ExtensionsFactory.except(args.except));
    }
    if( typeof args.rules !== 'undefined' ){
        var rules = args.rules.split('|');
        rules.forEach(function(rule){
            if( rule.length === 0 ){
                return;
            }
            if( rule.indexOf("(") > 0 ){
                var ruleTokens = rule.replace("(", "+").replace(")", "").split("+"); // ignoreDir(test) -> ignoreDir+test
                rule = ruleTokens[0];
                var ruleArgs = ruleTokens[1].split(",");
                if( typeof Rules[rule] !== 'undefined' ){
                    ruleArgs.unshift(Rules[rule]); // Add rule to the beginning of the array
                    lc.addRule.apply(lc, ruleArgs);
                }
                else{
                    console.error("Rule not found: " + rule);
                }
            }
            else{
                if( typeof Rules[rule] !== 'undefined' ){
                    lc.addRule(Rules[rule]);
                }
                else{
                    console.error("Rule not found: " + rule);
                }
            }
        });
    }
    try{
        if( typeof args.verbose !== 'undefined' ){
            lc.on(Events.FILE_ACCEPTED, function(fileName){
                logFile(fileName, true);
            });
            lc.on(Events.FILE_IGNORED, function(fileName){
                logFile(fileName, false);
            });
            lc.on(Events.DIR_IGNORED, function(fileName){
                logFile(fileName, false);
            });
        }
        lc.on(Events.ERROR, function(e){
            console.log(colors.red("[ERROR]"), "  ", e);
        });
        lc.getLines(function(result){
            console.log("Total files: " + result.files);
            console.log("Total lines: " + result.lines);
        });
    }
    catch(e){
        console.log(e.message);
    }
}

function logFile(file, accepted){
    if( accepted ){
        console.log(colors.green("[ACCEPT]"), " ", file);
    }
    else{
        console.log(colors.gray("[IGNORE]"), " ", file);
    }
}